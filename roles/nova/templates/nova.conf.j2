# {{ansible_managed}}

[DEFAULT]
enabled_apis = osapi_compute,metadata
transport_url = rabbit://{{nova_rabbitmq_user}}:{{nova_rabbitmq_user_password}}@{{rabbitmq_host}}
my_ip = {{nova_ip_address}}
use_neutron = true
firewall_driver = nova.virt.firewall.NoopFirewallDriver
allow_resize_to_same_host = True
block_device_allocate_retries = 150
max_local_block_devices = -1
{% if is_controller_node %}
ssl_only = true
cert = {{ req_cert_path }}
key = {{ req_privatekey_path }}
{% endif %}
{% if nova_default_schedule_zone %}
default_schedule_zone = {{nova_default_schedule_zone}}
{% endif %}
{% if is_compute_node %}
{% if nova_reserved_host_cpus %}
reserved_host_cpus = {{nova_reserved_host_cpus}}
{% endif %}
{% if nova_reserved_host_memory_mb %}
reserved_host_memory_mb = {{nova_reserved_host_memory_mb}}
{% endif %}
{% if nova_reserved_host_disk_mb %}
reserved_host_disk_mb = {{nova_reserved_host_disk_mb}}
{% endif %}
{% if nova_cpu_allocation_ratio %}
cpu_allocation_ratio = {{nova_cpu_allocation_ratio}}
{% endif %}
{% if nova_ram_allocation_ratio %}
ram_allocation_ratio = {{nova_ram_allocation_ratio}}
{% endif %}
{% if nova_disk_allocation_ratio %}
disk_allocation_ratio = {{nova_disk_allocation_ratio}}
{% endif %}
{% endif %}

[api]
auth_strategy = keystone
dhcp_domain = {{nova_dhcp_domain}}

{% if is_controller_node %}
[api_database]
connection = mysql+pymysql://nova:{{nova_db_user_password}}@{{db_host}}/nova_api

[database]
connection = mysql+pymysql://nova:{{nova_db_user_password}}@{{db_host}}/nova
{% endif %}

[cinder]
os_region_name = {{os_region}}
catalog_info = volumev3::internalURL
cross_az_attach = {{nova_cross_az_attach | lower}}

[glance]
api_servers = {{glance_url}}

[keystone_authtoken]
auth_url = {{keystone_url}}/v3
memcached_servers = {{memcached_host}}:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = nova
password = {{nova_user_password}}

[neutron]
url = {{neutron_url}}
auth_type = password
auth_url = {{keystone_url}}
project_name = service
project_domain_name = default
username = neutron
user_domain_name = default
password = {{nova_neutron_user_password}}
region_name = {{os_region}}
{% if is_controller_node %}
service_metadata_proxy = true
metadata_proxy_shared_secret = {{nova_metadata_secret}}
{% endif %}

[oslo_concurrency]
lock_path = /var/lib/nova/tmp

[oslo_messaging_rabbit]
heartbeat_in_pthread = false

[placement]
auth_type = password
auth_url = {{keystone_url}}/v3
project_name = service
project_domain_name = Default
user_domain_name = Default
username = placement
password = {{nova_placement_user_password}}
region_name = {{os_region}}

[vnc]
enabled = true
server_proxyclient_address = $my_ip
{% if is_controller_node %}
server_listen = $my_ip
{% endif %}
{% if is_compute_node %}
novncproxy_base_url = {{nova_novnc_url}}/vnc_auto.html
server_listen = 0.0.0.0

[libvirt]
cpu_mode = {{nova_libvirt_cpu_mode}}
{% if nova_libvirt_cpu_model_extra_flags %}
cpu_model_extra_flags = {{nova_libvirt_cpu_model_extra_flags}}
{% endif %}
{% if nova_ephemeral_storage_backend == 'rbd' %}
images_type = rbd
images_rbd_pool = {{nova_rbd_pool}}
images_rbd_ceph_conf = {{nova_rbd_ceph_conf}}
rbd_user = {{nova_rbd_user}}
rbd_secret_uuid = {{nova_rbd_secret_uuid}}
{% endif %}
{% if nova_enable_migrations %}
live_migration_scheme = ssh
{% endif %}
{% endif %}

{%- set all_devices = groups.compute_nodes | map('extract', hostvars) | selectattr('nova_pci_devices', 'defined') | map(attribute='nova_pci_devices') | flatten | unique %}
{% if is_controller_node and all_devices | length > 0 or is_compute_node and nova_pci_devices | length > 0 %}

[pci]
{% if is_compute_node %}
passthrough_whitelist = [{% for d in nova_pci_devices %}{ "vendor_id":"{{d.vendor_id}}", "product_id":"{{d.product_id}}" }{% if not loop.last %},{% endif%}{% endfor %}{% for d in nova_sriov_devices %},{ "devname":"{{d.devname}}", "physical_network":"{{d.physical_network}}", "trusted":"{{d.trusted|lower}}" }{% endfor %}]

{% for d in nova_pci_devices %}
alias = { "vendor_id":"{{d.vendor_id}}", "product_id":"{{d.product_id}}", "device_type":"{{d.device_type}}", "name":"{{d.name}}" }
{% endfor %}
{% endif %}
{% if is_controller_node %}
{% for d in all_devices %}
alias = { "vendor_id":"{{d.vendor_id}}", "product_id":"{{d.product_id}}", "device_type":"{{d.device_type}}", "name":"{{d.name}}", "numa_policy":"preferred" }
{% endfor %}
{% endif %}
{% endif %}
{% if is_controller_node %}

[filter_scheduler]
{% if all_devices | length > 0 and 'PciPassthroughFilter' not in nova_scheduler_enabled_filters %}
enabled_filters = {{nova_scheduler_enabled_filters | join(',')}},PciPassthroughFilter
{% else %}
enabled_filters = {{nova_scheduler_enabled_filters | join(',')}}
{% endif %}
available_filters = nova.scheduler.filters.all_filters
{% endif %}
