- name: setup controller
  include_tasks: controller.yml
  when: is_controller_node

- name: install compute
  package:
    name: openstack-nova-compute
    state: "{{package_state |Â default('present')}}"
  when: is_compute_node
  notify: restart nova-compute

- name: configure
  template:
    src: nova.conf.j2
    dest: /etc/nova/nova.conf
    backup: true
  notify:
    - init nova db
    - restart nova-api
    - restart nova-scheduler
    - restart nova-conductor
    - restart nova-novncproxy
    - restart nova-compute

- name: configure kvm
  copy:
    src: kvm.conf
    dest: /etc/modprobe.d/kvm.conf
  when: "is_compute_node
        and nova_nested_guest_support | bool"

- name: configure rbd ephemeral storage backend
  include_tasks: rbd.yml
  when: "is_compute_node
        and nova_ephemeral_storage_backend == 'rbd'"

- name: create libvirt-vnc ca directory
  file:
    name: "{{nova_libvirt_vnc_ca_dir}}"
    state: directory
  when: "is_compute_node
        and nova_libvirt_vnc_tls"

- name: request libvirt-vnc certificates for qemu
  include_role:
    name: ca
    tasks_from: request_cert.yml
  vars:
    ca_dir: "{{nova_libvirt_vnc_ca_dir}}"
    ca_organization_unit_name: libvirt VNC
    ca_key_passphrase: "{{nova_libvirt_vnc_ca_key_passphrase}}"
    req_name: qemu
    req_common_name: "{{ansible_nodename}}"
    req_owner: root
    req_group: root
    req_post_command: systemctl restart libvirtd
    req_notify: restart libvirtd
    req_override_privatekey_path: "{{nova_libvirt_vnc_ca_dir}}/server-key.pem"
    req_override_cert_path: "{{nova_libvirt_vnc_ca_dir}}/server-cert.pem"
    req_override_ca_cert_path: "{{nova_libvirt_vnc_ca_dir}}/ca-cert.pem"
  when: "is_compute_node
        and nova_libvirt_vnc_tls"

- name: configure qemu
  template:
    src: qemu.conf.j2
    dest: /etc/libvirt/qemu.conf
    backup: true
  when: is_compute_node
  notify: restart libvirtd

- name: enable migrations
  include_tasks: migrations.yml
  args:
    apply:
      tags:
        - nova_enable_migrations
  when: "is_compute_node
        and nova_enable_migrations"
  tags: nova_enable_migrations

- name: start and enable libvirt
  systemd:
    name: libvirtd
    enabled: true
    state: started
  when: is_compute_node

- name: flush handlers
  meta: flush_handlers

- name: start and enable controller
  systemd:
    name: "{{item}}"
    enabled: true
    state: started
  loop:
    - openstack-nova-api
    - openstack-nova-scheduler
    - openstack-nova-conductor
    - openstack-nova-novncproxy
  when: is_controller_node

- name: start and enable compute
  systemd:
    name: openstack-nova-compute
    enabled: true
    state: started
  when: is_compute_node

- name: add flavors
  os_nova_flavor:
    auth: "{{keystone_admin_auth}}"
    name: "{{item.name}}"
    vcpus: "{{item.vcpus}}"
    ram: "{{item.ram}}"
    disk: "{{item.disk}}"
    state: "{{item.state | default('present')}}"
  loop: "{{nova_flavors}}"
  run_once: true

- name: set availability zones
  os_nova_host_aggregate:
    auth: "{{keystone_admin_auth}}"
    name: "az-{{hostvars[item].os_availability_zone}}"
    hosts:
      - "{{hostvars[item].ansible_nodename}}"
    purge_hosts: false
    availability_zone: "{{hostvars[item].os_availability_zone}}"
  loop: "{{groups.compute_nodes}}"
  when: "'os_availability_zone' in hostvars[item]
        and hostvars[item].os_availability_zone != 'nova'"
  run_once: true
